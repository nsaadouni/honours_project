NEW FINDING!

first 8 alter with different pin number (and they also alter based on time I think!)
second 8 alter with different random challenge from the smartcard

seems like a block cipher is used!
Or two different signtuares are calculated (block cipher makes more sense rather than the alternative)



DES-MAC described by RFC 1510 for kerberos would act with said behaviour if a random number generator with time=NULL is used to produce the CONF

--------------------------------------------------------------------------------------------------------------------------------------------------------
pkcs11-tool --module=/usr/lib/x64-athena/libASEP11.so -l -p '0000000000000000' -L -M

Available slots:
Slot 0 (0x0): Virtual PCD 00 00
  (empty)
Slot 1 (0x1): Virtual PCD 00 01
  (empty)
Slot 2 (0x2): OMNIKEY AG CardMan 3121 00 00
  token label        : IDProtect
  token manufacturer : Athena Smartcard Solutions
  token model        : IDProtect
  token flags        : rng, login required, PIN initialized, token initialized
  hardware version   : 1.0
  firmware version   : 1.0
  serial num         : 0D50000921228796

Using slot 2 with a present token (0x2)
Supported mechanisms:
  RSA-PKCS, keySize={1024,2048}, hw, encrypt, decrypt, sign, verify, other flags=0xa
  RSA-X-509, keySize={1024,2048}, hw, encrypt, decrypt, verify, other flags=0xa
  SHA1-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  RSA-PKCS-OAEP, keySize={1024,2048}, encrypt, decrypt, unwrap
  RSA-PKCS-PSS, keySize={1024,2048}, sign, verify
  SHA256-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  SHA384-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  SHA512-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  MD5-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  RSA-PKCS-KEY-PAIR-GEN, keySize={1024,2048}, hw, generate_key_pair
  DES-KEY-GEN, keySize={8,8}, generate
  DES2-KEY-GEN, keySize={16,16}, generate
  DES3-KEY-GEN, keySize={24,24}, generate
  DES-ECB, keySize={8,8}, hw, encrypt, decrypt, unwrap
  DES3-ECB, keySize={16,24}, hw, encrypt, decrypt, unwrap
  DES-CBC, keySize={8,8}, hw, encrypt, decrypt, unwrap
  DES-MAC-GENERAL, keySize={8,24}, hw, sign, verify
  DES-MAC, keySize={8,24}, hw, sign, verify
  DES3-CBC, keySize={16,24}, hw, encrypt, decrypt, unwrap
  DES3-MAC-GENERAL, keySize={16,24}, hw, sign, verify
  DES3-MAC, keySize={16,24}, hw, sign, verify
  SHA-1, digest
  SHA-1-HMAC, keySize={8,24}, sign, verify
  MD5, digest
  MD5-HMAC, keySize={8,24}, sign, verify
  AES-KEY-GEN, keySize={16,32}, generate
  AES-ECB, keySize={16,32}, hw, encrypt, decrypt, unwrap
  AES-CBC, keySize={16,32}, hw, encrypt, decrypt, unwrap
  AES-MAC, keySize={16,32}, hw, sign, verify
  AES-MAC-GENERAL, keySize={16,32}, hw, sign, verify
  SHA256, digest
  mechtype-0x251, keySize={8,24}, sign, verify
  SHA384, digest
  mechtype-0x261, keySize={8,24}, sign, verify
  SHA512, digest
  mechtype-0x271, keySize={8,24}, sign, verify
  ECDSA-KEY-PAIR-GEN, keySize={192,521}, hw, other flags=0x1900000
  ECDSA, keySize={192,521}, hw, sign
  ECDH1-DERIVE, keySize={192,521}, hw, derive


  # NEED TO DELETE THE SHIT THE GUY HAS DONE!
  Using slot 2 with a present token (0x2)
Public Key Object; RSA 1024 bits
  label:      Odysseus
  ID:         0b
  Usage:      encrypt, verify, wrap
Public Key Object; RSA 1024 bits
  label:      Eros
  ID:         0c
  Usage:      encrypt, verify, wrap
Private Key Object; RSA 
  label:      Penelope
  ID:         0b
  Usage:      decrypt, sign, unwrap
Private Key Object; RSA 
  label:      Psyche
  ID:         0c
  Usage:      decrypt, sign, unwrap
Private Key Object; RSA 
  label:      Erebus
  ID:         0f
  Usage:      decrypt, sign, unwrap
Secret Key Object; unknown key algorithm 19
  label:      Apollo
  ID:         01
  Usage:      encrypt, decrypt, verify, wrap, unwrap
Secret Key Object; unknown key algorithm 20
  label:      Ares
  ID:         02
  Usage:      encrypt, decrypt, verify, wrap, unwrap
Secret Key Object; unknown key algorithm 21
  label:      Dionysus
  ID:         03
  Usage:      encrypt, decrypt, verify, wrap, unwrap
Secret Key Object; unknown key algorithm 31
  label:      Hades
  ID:         04
  Usage:      encrypt, decrypt, verify, wrap, unwrap
Secret Key Object; unknown key algorithm 31
  label:      Chaos
  ID:         05
  Usage:      encrypt, decrypt, verify, wrap, unwrap



Using slot 2 with a present token (0x2)
Supported mechanisms:
  RSA-PKCS, keySize={1024,2048}, hw, encrypt, decrypt, sign, verify, other flags=0xa
  RSA-X-509, keySize={1024,2048}, hw, encrypt, decrypt, verify, other flags=0xa
  SHA1-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  RSA-PKCS-OAEP, keySize={1024,2048}, encrypt, decrypt, unwrap
  RSA-PKCS-PSS, keySize={1024,2048}, sign, verify
  SHA256-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  SHA384-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  SHA512-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  MD5-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  RSA-PKCS-KEY-PAIR-GEN, keySize={1024,2048}, hw, generate_key_pair
  DES-KEY-GEN, keySize={8,8}, generate
  DES2-KEY-GEN, keySize={16,16}, generate
  DES3-KEY-GEN, keySize={24,24}, generate
  DES-ECB, keySize={8,8}, hw, encrypt, decrypt, unwrap
  DES3-ECB, keySize={16,24}, hw, encrypt, decrypt, unwrap
  DES-CBC, keySize={8,8}, hw, encrypt, decrypt, unwrap
  DES-MAC-GENERAL, keySize={8,24}, hw, sign, verify
  DES-MAC, keySize={8,24}, hw, sign, verify
  DES3-CBC, keySize={16,24}, hw, encrypt, decrypt, unwrap
  DES3-MAC-GENERAL, keySize={16,24}, hw, sign, verify
  DES3-MAC, keySize={16,24}, hw, sign, verify
  SHA-1, digest
  SHA-1-HMAC, keySize={8,24}, sign, verify


  ECDSA-KEY-PAIR-GEN, keySize={192,521}, hw, other flags=0x1900000
  ECDSA, keySize={192,521}, hw, sign
  ECDH1-DERIVE, keySize={192,521}, hw, derive