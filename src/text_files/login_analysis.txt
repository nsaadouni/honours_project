
This is produced at C = 10; X = 00 00 00 00 00 00 00 00
40 90 02 b1 17 3a e8 2f b3 69 01 2d 32 47 13 b5


This is produced at C = 9; X = 00 00 00 00 00 00 00 00 
3b 97 37 e6 72 fb 74 ea 4a 15 2d 86 8f ad 2b 1a



another at c = 10; X = 0000000000
04 72 6c ce 81 7b c4 6d c0 b0 80 cd cc 77 4e 99
c0 fc ac 3c bb 6d 40 d4 3e db 61 25 68 31 5b 35









1 after each other create the same random number!!! timing is key! 
#think i got this a bit wrong ?
1d 69 d3 c8 dd 41 ea c7 40 95 f9 53 0a 44 90 38
1d 69 d3 c8 dd 41 ea c7 40 95 f9 53 0a 44 90 38



# MIND BLOWN!!!
1. da 9c 5a 8a 30 88 ad 97 e2 2f 0b ff 0d e5 d8 ba
2. da 9c 5a 8a 30 88 ad 97 19 c0 d9 b9 ec 57 61 83 #successful login then logout
3. e3 b1 18 eb 86 cb 6e 34 0d 25 ff 82 49 71 2c 80


AGAIN.

1. 7c c0 e0 4c 14 1d 61 69 7f 7b b5 1e e0 fd 4f fb
63 c9

2. 79 e2 01 be 95 73 c4 f5 46 06 73 38 4c ef bd 74
90 00

3. 79 e2 01 be 95 73 c4 f5 5b d4 cb da e9 ae e5 64
63 c9



1. 00 84 00 00 08
00 00 00 00 00 00 00 00 90 00
08 61 53 86 5a ed 2a 5d 90 00

2. 00 84 00 00 08
3d 9c 11 d8 50 c8 4c 34 90 00


3. 00 84 00 00 08
00 00 00 00 00 00 00 00 90 00
28 81 00 7e 44 39 2e 19 90 00




AGAIN AGAIN.

1. 80 20 00 00 10 c9 9d f9 7c 65 e2 89 1d a5 db 60 d2 b5 46 9b b6
63 c9


2. 80 20 00 00 10 fc 06 3f 07 37 d2 82 3b b2 af 82 63 f8 b1 85 96
90 00

3. 80 20 00 00 10 fc 06 3f 07 37 d2 82 3b f7 b6 2c 45 99 5b 07 eb
63 c9



1. 00 84 00 00 08
00 00 00 00 00 00 00 00 90 00
0b c5 d5 87 db b1 43 9b 90 00

2. 00 84 00 00 08
47 2d 51 cf 60 14 78 8f 90 00

3. 00 84 00 00 08
00 00 00 00 00 00 00 00 90 00
37 4e e9 e4 8f 2b c6 ac 90 00


00 84 00 00 08
00 00 00 00 00 00 00 00 90 00
12 55 11 18 5e df c2 c0 90 00

80 20 00 00 10 7b 48 0a bb 69 cb bd 9e 04 83 59 a6 9e 61 ec 40
63 c8












the fact that for different random challenges within a very small time frame only the last 8 bytes are altered suggests

a block cipher must be used (possibily CMAC)

a counter / time measure if used for the other 8 bytes?

HASH FUNCTIONS + HMAC'S ALTER GREATLY AT A THE SMALL CHANGE IN THE RANDOM CHALLENGE!


the fact that delaying the 'verifaction' command does not prevent logins does not suggest a time stamp is used?

- very confusing!



CANNOT BE CMAC! DOESNT WORK EITHER


ECB mode works!!
CBC mode does not work




consider this possibility

get challenge (card sends challenge)
athena library on computer generates its own challenge

verify

8 byte challenge || signature(challenge1, challenge2, password)



BOOM!






NEW FINDING!

first 8 alter with different pin number (and they also alter based on time I think!)
second 8 alter with different random challenge from the smartcard

seems like a block cipher is used!
Or two different signtuares are calculated (block cipher makes more sense rather than the alternative)



DES-MAC described by RFC 1510 for kerberos would act with said behaviour if a random number generator with time=NULL is used to produce the CONF

--------------------------------------------------------------------------------------------------------------------------------------------------------
pkcs11-tool --module=/usr/lib/x64-athena/libASEP11.so -l -p '0000000000000000' -L -M

Available slots:
Slot 0 (0x0): Virtual PCD 00 00
  (empty)
Slot 1 (0x1): Virtual PCD 00 01
  (empty)
Slot 2 (0x2): OMNIKEY AG CardMan 3121 00 00
  token label        : IDProtect
  token manufacturer : Athena Smartcard Solutions
  token model        : IDProtect
  token flags        : rng, login required, PIN initialized, token initialized
  hardware version   : 1.0
  firmware version   : 1.0
  serial num         : 0D50000921228796

Using slot 2 with a present token (0x2)
Supported mechanisms:
  RSA-PKCS, keySize={1024,2048}, hw, encrypt, decrypt, sign, verify, other flags=0xa
  RSA-X-509, keySize={1024,2048}, hw, encrypt, decrypt, verify, other flags=0xa
  SHA1-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  RSA-PKCS-OAEP, keySize={1024,2048}, encrypt, decrypt, unwrap
  RSA-PKCS-PSS, keySize={1024,2048}, sign, verify
  SHA256-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  SHA384-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  SHA512-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  MD5-RSA-PKCS, keySize={1024,2048}, hw, sign, verify
  RSA-PKCS-KEY-PAIR-GEN, keySize={1024,2048}, hw, generate_key_pair
  DES-KEY-GEN, keySize={8,8}, generate
  DES2-KEY-GEN, keySize={16,16}, generate
  DES3-KEY-GEN, keySize={24,24}, generate
  DES-ECB, keySize={8,8}, hw, encrypt, decrypt, unwrap
  DES3-ECB, keySize={16,24}, hw, encrypt, decrypt, unwrap
  DES-CBC, keySize={8,8}, hw, encrypt, decrypt, unwrap
  DES-MAC-GENERAL, keySize={8,24}, hw, sign, verify
  DES-MAC, keySize={8,24}, hw, sign, verify
  DES3-CBC, keySize={16,24}, hw, encrypt, decrypt, unwrap
  DES3-MAC-GENERAL, keySize={16,24}, hw, sign, verify
  DES3-MAC, keySize={16,24}, hw, sign, verify
  SHA-1, digest
  SHA-1-HMAC, keySize={8,24}, sign, verify
  MD5, digest
  MD5-HMAC, keySize={8,24}, sign, verify
  AES-KEY-GEN, keySize={16,32}, generate
  AES-ECB, keySize={16,32}, hw, encrypt, decrypt, unwrap
  AES-CBC, keySize={16,32}, hw, encrypt, decrypt, unwrap
  AES-MAC, keySize={16,32}, hw, sign, verify
  AES-MAC-GENERAL, keySize={16,32}, hw, sign, verify
  SHA256, digest
  mechtype-0x251, keySize={8,24}, sign, verify
  SHA384, digest
  mechtype-0x261, keySize={8,24}, sign, verify
  SHA512, digest
  mechtype-0x271, keySize={8,24}, sign, verify
  ECDSA-KEY-PAIR-GEN, keySize={192,521}, hw, other flags=0x1900000
  ECDSA, keySize={192,521}, hw, sign
  ECDH1-DERIVE, keySize={192,521}, hw, derive


  # NEED TO DELETE THE SHIT THE GUY HAS DONE!
  Using slot 2 with a present token (0x2)
Public Key Object; RSA 1024 bits
  label:      Odysseus
  ID:         0b
  Usage:      encrypt, verify, wrap
Public Key Object; RSA 1024 bits
  label:      Eros
  ID:         0c
  Usage:      encrypt, verify, wrap
Private Key Object; RSA 
  label:      Penelope
  ID:         0b
  Usage:      decrypt, sign, unwrap
Private Key Object; RSA 
  label:      Psyche
  ID:         0c
  Usage:      decrypt, sign, unwrap
Private Key Object; RSA 
  label:      Erebus
  ID:         0f
  Usage:      decrypt, sign, unwrap
Secret Key Object; unknown key algorithm 19
  label:      Apollo
  ID:         01
  Usage:      encrypt, decrypt, verify, wrap, unwrap
Secret Key Object; unknown key algorithm 20
  label:      Ares
  ID:         02
  Usage:      encrypt, decrypt, verify, wrap, unwrap
Secret Key Object; unknown key algorithm 21
  label:      Dionysus
  ID:         03
  Usage:      encrypt, decrypt, verify, wrap, unwrap
Secret Key Object; unknown key algorithm 31
  label:      Hades
  ID:         04
  Usage:      encrypt, decrypt, verify, wrap, unwrap
Secret Key Object; unknown key algorithm 31
  label:      Chaos
  ID:         05
  Usage:      encrypt, decrypt, verify, wrap, unwrap
