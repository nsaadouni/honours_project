#!/usr/bin/python

import hashlib as hb 
import binascii
from operator import xor

def print_all_hashes():
	for x in hb.algorithms_available:
		print(x)


def m1(pin, x):
	return x + pin


def m2(pin, x):
	return pin + x

def m3(pin,x):
	return pin ^ x


def m4(pin,x):
	return pin + x


def m5(pin,x):
	return pin - x


def m6(pin,x):
	return xor(pin,x)

def find_hash_used(x, y):

	# hb.algorithms_available

	for hash in ['SHA1','SHA256'] :
		h = hb.new(hash)
		h.update(str(x))
		s = h.hexdigest()
		yyy = int('0x'+s,16)
		yy = (int(yyy) % 2**(8*16))
		if yy == str(y):
			print("Hash found: " + hash)
			break
		else:
			#print("Hash not found: " + hash)
			print y
			print yy
			print ''
			pass




apdu_x = '29C7291FED13237B'	# random number from get chalenege
apdu_y = 'AE69B84B7DBEBB2B6363D37D079DD3EC' # hash of pin + random number
pin = '3039'
apdu_x1 = int(0x303929C7291FED13237B)
apdu_x2 = int(0x29C7291FED13237B3039)

"""
find_hash_used(apdu_x1,apdu_y)
find_hash_used(apdu_x2,apdu_y)
find_hash_used(m1(pin,apdu_x),apdu_y)
find_hash_used(m2(pin,apdu_x),apdu_y)
find_hash_used(m3(pin,apdu_x),apdu_y)
find_hash_used(m3(pin,apdu_x),apdu_y)
find_hash_used(m4(pin,apdu_x),apdu_y)
find_hash_used(m5(pin,apdu_x),apdu_y)
find_hash_used(m6(pin,apdu_x),apdu_y)
"""

#dk = hashlib.pbkdf2_hmac('sha256', b'password', b'salt', 100000)
#binascii.hexlify(dk)













# whirlpool hash for string:
#	'This is a test string to be used in explanation'

x = 'This is a test string to be used in explanation'
yy = '1a22fb7cca7be8088333d7a656ff4d10887184ff7aa4184594d6970938efabe3bced5f82d184360fee173ff890b8c72ff149825616f49f2ebad08ed0b450365b'
y = int(yy,16)
